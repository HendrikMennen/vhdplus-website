{"remainingRequest":"C:\\Users\\HendrikMennen\\source\\repos\\VHDPlus Website\\website\\node_modules\\babel-loader\\lib\\index.js??ref--7-1!C:\\Users\\HendrikMennen\\source\\repos\\VHDPlus Website\\website\\node_modules\\@docusaurus\\mdx-loader\\src\\index.js??ref--7-2!C:\\Users\\HendrikMennen\\source\\repos\\VHDPlus Website\\website\\node_modules\\@docusaurus\\plugin-content-docs\\lib\\markdown\\index.js??ref--7-3!C:\\Users\\HendrikMennen\\source\\repos\\VHDPlus Website\\docs\\extension_dcmotor.md","dependencies":[{"path":"C:\\Users\\HendrikMennen\\source\\repos\\VHDPlus Website\\docs\\extension_dcmotor.md","mtime":1576668465204},{"path":"C:\\Users\\HendrikMennen\\source\\repos\\VHDPlus Website\\website\\.docusaurus\\docusaurus-plugin-content-docs\\site-docs-extension-dcmotor-md-02a.json","mtime":1576669325421},{"path":"C:\\Users\\HendrikMennen\\source\\repos\\VHDPlus Website\\website\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1576667426517},{"path":"C:\\Users\\HendrikMennen\\source\\repos\\VHDPlus Website\\website\\node_modules\\babel-loader\\lib\\index.js","mtime":1576667426482},{"path":"C:\\Users\\HendrikMennen\\source\\repos\\VHDPlus Website\\website\\node_modules\\@docusaurus\\mdx-loader\\src\\index.js","mtime":1576667433976},{"path":"C:\\Users\\HendrikMennen\\source\\repos\\VHDPlus Website\\website\\node_modules\\@docusaurus\\plugin-content-docs\\lib\\markdown\\index.js","mtime":1576667431875}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["C:/Users/HendrikMennen/source/repos/VHDPlus Website/docs/extension_dcmotor.md"],"names":["React","mdx","frontMatter","id","title","rightToc","value","children","metadata","makeShortcode","name","MDXDefaultShortcode","props","console","warn","layoutProps","MDXLayout","MDXContent","components","isMDXComponent"],"mappings":"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","sourcesContent":["\n  import React from 'react';\n  import { mdx } from '@mdx-js/react';\n\n  export const frontMatter = {\n\tid: 'extension_dcmotor',\n\ttitle: 'DC Motor Extension'\n};\n  /* @jsx mdx */\n\nexport const rightToc = [{\n  value: 'DC Motor Extension',\n  id: 'dc-motor-extension',\n  children: []\n}, {\n  value: 'Programming with one motor',\n  id: 'programming-with-one-motor',\n  children: [{\n    value: 'Motor',\n    id: 'motor',\n    children: []\n  }, {\n    value: 'Encoder',\n    id: 'encoder',\n    children: []\n  }]\n}, {\n  value: 'Programming with two motors',\n  id: 'programming-with-two-motors',\n  children: []\n}, {\n  value: 'Links',\n  id: 'links',\n  children: []\n}];\nexport const metadata = {\n  \"id\": \"extension_dcmotor\",\n  \"title\": \"DC Motor Extension\",\n  \"description\": \"![DC Motor Driver](assets/extensions/dcmotor/Items.png)\\r\",\n  \"source\": \"@site/..\\\\docs\\\\extension_dcmotor.md\",\n  \"permalink\": \"/docs/extension_dcmotor\",\n  \"lastUpdatedBy\": \"Author\",\n  \"lastUpdatedAt\": 1539502055,\n  \"sidebar\": \"docs\",\n  \"previous\": {\n    \"title\": \"Level Shifter Extension\",\n    \"permalink\": \"/docs/extension_levelshifter\"\n  },\n  \"next\": {\n    \"title\": \"Bluetooth Extension\",\n    \"permalink\": \"/docs/extension_bluetooth\"\n  }\n};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  rightToc,\nmetadata\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <p><img parentName=\"p\" {...{\n        \"src\": \"assets/extensions/dcmotor/Items.png\",\n        \"alt\": \"DC Motor Driver\"\n      }}></img></p>\n    <p>{`This module enables you to control a DC motor and is ideal to be used for a robot. With the motor driver, you can turn the motor forward and backward at any speed. If your motor has an encoder you can see how far you drove and how fast the motor is spinning.`}</p>\n    <p><strong parentName=\"p\">{`Important:`}</strong>{`\n`}<strong parentName=\"p\">{`THE BOARD GETS HOT AT HIGH CURRENT!`}</strong>{`\n`}<strong parentName=\"p\">{`DON'T SUPPLY A DIFFERENT VOLTAGE WITH THE SCREW TERMINAL IF CONNECTED WITH 5V!`}</strong></p>\n    <h2 {...{\n      \"id\": \"dc-motor-extension\"\n    }}>{`DC Motor Extension`}</h2>\n    <p><img parentName=\"p\" {...{\n        \"src\": \"assets/extensions/dcmotor/Items1.PNG\",\n        \"alt\": \"DC Motor Driver connected\"\n      }}></img></p>\n    <p>{`To use the motor, connect the power supply for the motor (note that different motors have different voltage ratings). The motor driver supports 4.5-38V with a maximum of 6A continous and a peak of 10A. You can connect the Motor with the second screw terminal and the encoder with an IO, 3V3 and GND from the `}<a parentName=\"p\" {...{\n        \"href\": \"component_vhdpshield\"\n      }}>{`Shield`}</a>{`.`}</p>\n    <h2 {...{\n      \"id\": \"programming-with-one-motor\"\n    }}>{`Programming with one motor`}</h2>\n    <h3 {...{\n      \"id\": \"motor\"\n    }}>{`Motor`}</h3>\n    <p>{`To control the motor speed, use the Basics/PWM Component in Libraries.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-vhdp\"\n      }}>{`NewComponent PWM_Generator \n(\n  CLK_Frequency   => 50000000,          --50 MHz\n  PWM_Frequency   => 100000,            --100 KHz\n  Bits_Resolution => 8,                 --Speed = 0-255\n  Phases          => 1,                 --1 Output\n\n  Reset           => RST,               --Reset\n  Enable          => '1',               --Enable\n  Duty            => Motor_Speed,       --x\"00\" to x\"FF\"\n  PWM_Out(0)      => Motor_PWM          --Output\n);\n`}</code></pre>\n    <p>{`Connect Motor_PWM to one of the motor outputs and have the different one at '0'. You can set the speed by assigning Motor_Speed to STD_LOGIC_VECTOR(TO_UNSIGNED(`}{`[Speed]`}{`, 8));`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-vhdp\"\n      }}>{`If(Forward = '1') --should go forward\n{\n   Motor_B <= '0';\n   Motor_F <= Motor_PWM;   --outputs pwm on forward output\n}\nElse              --should go backward\n{\n   Motor_F <= '0';\n   Motor_B <= Motor_PWM;  --outputs pwm on backward output\n}\n\nMotor_Speed <= STD_LOGIC_VECTOR(TO_UNSIGNED(Speed, 8));\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"encoder\"\n    }}>{`Encoder`}</h3>\n    <p>{`To see the driven length and the motor speed, use the Extensions/Motor_Encoder Component in Libraries.\nYou need a motor with an encoder and have to connect the encoder output, 3V3 and GND.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-vhdp\"\n      }}>{`NewComponent Motor_Encoder \n(\n   CLK_Frequency       => 50000000,     --50 MHz\n   --Used to convert Length and Speed to mm and mm/s\n   Holes_In_Disk       => 14,           --Impulses per turn\n   Gear_Ratio          => 34,           --1:34\n   Wheel_Circumference => 204,          --204mm\n   --parameters for length and period time\n   Max_Length          => 10000,        --10m\n   Time_Invert_Divider => 50,           --for 50MHz -> Time in µs\n   Max_Time            => 1000000,      --1s (1.000.000 µs)\n\n   --Inputs\n   Encoder_In          => Encoder,      --Encoder Input\n   Reset               => RST,          --Reset\n   Length_RST          => Length_RST,   --Reset only for length\n   --Outputs\n   Length              => Length,       --Length output\n   New_Length          => New_Length,   --One cycle high on rising edge of encoder\n   Time                => Time_Left,    --Period time of encoder edges\n   Speed               => Speed_L,      --Driven length in last second\n);\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"programming-with-two-motors\"\n    }}>{`Programming with two motors`}</h2>\n    <p>{`To drive different routes with two motors, use the Extensions/Motor_Controler Component in Libraries.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-vhdp\"\n      }}>{`NewComponent Motor_Controller \n(\n    CLK_Frequency       => 50000000,    --50 MHz\n\n    --PWM parameters\n    PWM_Frequency       => 100000,          --100 KHz\n    Bits_Resolution     => 8,               --Speed = 0-255\n\n    --Motor Encoder parameters\n    Holes_In_Disk       => 1,       --1 to save Logic Elements\n    Gear_Ratio          => 1,       \n    Wheel_Circumference => 1,           \n    --Length is (Drive(n)*Wheel_Circumference)/(Holes_In_Disk*Gear_Ratio)\n    --Speed is (Speed*Wheel_Circumference)/(Holes_In_Disk*Gear_Ratio)\n    Time_Invert_Divider => 50,              --for 50 MHz -> Time in �s\n    Max_Time            => 100000,          --100ms\n    Max_Length          => 10000,           --10m\n\n    --Speed correction for straight driving\n    Correction_Step     => 1,               --speed correction on period time difference\n    Length_Corr_Step    => 25,              --speed correction on length difference\n    Max_Length_Diff     => 10,              --Accepted difference for length without correction\n    \n    --Hardware Inputs\n    Reset               => '0',             --Reset\n    Encoder_L           => Encoder_L,   --E1 encoder input of first motor\n    Encoder_R           => Encoder_R,       --E1 encoder input of second motor\n    --Hardware Outputs\n    Motor_LF            => ML1,             --M1 of first motor\n    Motor_LB            => ML2,             --M2 of first motor\n    Motor_RF            => MR1,             --M1 of second motor\n    Motor_RB            => MR2,             --M2 of second motor\n\n    --Inputs\n    Enable              => Motor_Enable,    --'0' to stop driving and '1' to continue driving\n    Reset_Drive         => RST_Drive,       --'0' to reset driven length and '1' to start driving\n    Drive_L             => Drive_L,     --Length to drive with left motor\n    Drive_R             => Drive_R,         --Length to drive with right motor\n    Drive_Speed         => Drive_Speed,     --Speed from 0-255\n    --Outputs\n    Speed_L             => Speed_L,         --Driven length in last second with left motor\n    Speed_R             => Speed_R,         --Driven length in last second with right motor\n    Driven_L            => Driven_L,        --Driven length since last reset with left motor\n    Driven_R            => Driven_R,        --Driven length since last reset with right motor\n    Finished            => Motor_Finished,  --'1' if the Motor drove the given length\n    Error               => Motor_Error,     --'1' if the Controller detected that one motor isn't turning (depending on Max_Time)\n    Correction          => Motor_Correction,--Speed correction\n);\n`}</code></pre>\n    <p>{`Specify the parameters, add the encoder inputs and motor outputs to your Main IOs, create signals for the IOs of the Motor Controller and connect everything like in the example above. Now you can just drive like this:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-vhdp\"\n      }}>{`Thread\n{\n    If(BTN = '1')            --Button pressed\n    {\n        Drive_L     <= (1000*Wheel_Circumference)/(Holes_In_Disk*Gear_Ratio);   --drives 1m\n        Drive_R     <= (1000*Wheel_Circumference)/(Holes_In_Disk*Gear_Ratio);   --drives 1m\n        Drive_Speed <= 230;  --0 to 255\n        RST_Drive   <= '1';  --Reset last driven length\n        Step                 --Start driving (Step gives Motor controller one cycle to reset values)\n        {\n            RST_Drive   <= '0';\n        }\n        While(Motor_Finished = '0' AND Motor_Error = '0'){} --Wait until driving finished or an error appeared \n        While(BTN = '1')     --Wait until button is released if still pressed\n        {\n            Wait(50000000);\n        }\n    }\n}\n`}</code></pre>\n    <p>{`Also check out our `}<a parentName=\"p\" {...{\n        \"href\": \"/docs/extension_levelshifter\"\n      }}>{`level shifter`}</a>{`\nto e.g. add ultrasonic distance sensors to your robot.`}</p>\n    <h2 {...{\n      \"id\": \"links\"\n    }}>{`Links`}</h2>\n    <ul>\n      <li parentName=\"ul\"><a href=\"http://www.ti.com/lit/ds/symlink/drv8871.pdf\" target=\"_blank\">Datasheet</a></li>\n    </ul>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;\n  "]}]}